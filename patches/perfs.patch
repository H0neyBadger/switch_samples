diff --git a/lib/src/frameprocessor.c b/lib/src/frameprocessor.c
index 1f5bce9..82ca304 100644
--- a/lib/src/frameprocessor.c
+++ b/lib/src/frameprocessor.c
@@ -205,11 +205,9 @@ static ChiakiErrorCode chiaki_frame_processor_fec(ChiakiFrameProcessor *frame_pr
 		}
 	}
 	assert(erasure_index == erasures_count);
-
 	ChiakiErrorCode err = chiaki_fec_decode(frame_processor->frame_buf, frame_processor->buf_size_per_unit,
 			frame_processor->units_source_expected, frame_processor->units_fec_received,
 			erasures, erasures_count);
-
 	if(err != CHIAKI_ERR_SUCCESS)
 	{
 		err = CHIAKI_ERR_FEC_FAILED;
diff --git a/lib/src/gkcrypt.c b/lib/src/gkcrypt.c
index 25d78f8..aa23d90 100644
--- a/lib/src/gkcrypt.c
+++ b/lib/src/gkcrypt.c
@@ -23,6 +23,10 @@
 
 #include "utils.h"
 
+#ifdef __SWITCH__
+#include <switch/crypto/aes.h>
+#endif
+
 #define KEY_BUF_CHUNK_SIZE 0x1000
 
 
@@ -272,7 +276,15 @@ CHIAKI_EXPORT ChiakiErrorCode inline chiaki_gkcrypt_gen_key_stream(ChiakiGKCrypt
 	for(uint8_t *cur = buf, *end = buf + buf_size; cur < end; cur += CHIAKI_GKCRYPT_BLOCK_SIZE)
 		counter_add(cur, gkcrypt->iv, counter_offset++);
 
-#if defined(__SWITCH__) || defined(CHIAKI_LIB_ENABLE_MBEDTLS)
+#if defined(__SWITCH__)
+	Aes128Context aes_ctx;
+	aes128ContextCreate(&aes_ctx, gkcrypt->key_base, true);
+	for(int i=0; i<buf_size; i=i+16)
+	{
+		// loop over all blocks of 16 bytes (128 bits)
+		aes128EncryptBlock(&aes_ctx, buf+i, buf+i);
+	}
+#elif defined(CHIAKI_LIB_ENABLE_MBEDTLS)
 	for(int i=0; i<buf_size; i=i+16)
 	{
 		// loop over all blocks of 16 bytes (128 bits)
@@ -487,7 +499,6 @@ static void *gkcrypt_thread_func(void *user)
 
 		if(gkcrypt->key_buf_thread_stop || err != CHIAKI_ERR_SUCCESS)
 			break;
-
 		CHIAKI_LOGV(gkcrypt->log, "GKCrypt %d key buf size %#llx, start offset: %#llx, populated: %#llx, min key pos: %#llx, last key pos: %#llx, generating next chunk",
 					(int)gkcrypt->index,
 					(unsigned long long)gkcrypt->key_buf_size,
@@ -495,14 +506,15 @@ static void *gkcrypt_thread_func(void *user)
 					(unsigned long long)gkcrypt->key_buf_populated,
 					(unsigned long long)gkcrypt->key_buf_key_pos_min,
 					(unsigned long long)gkcrypt->last_key_pos);
-
 		if(gkcrypt->last_key_pos > gkcrypt->key_buf_key_pos_min + gkcrypt->key_buf_populated)
 		{
 			// skip ahead if the last key pos is already beyond our buffer
 			size_t key_pos = (gkcrypt->last_key_pos / KEY_BUF_CHUNK_SIZE) * KEY_BUF_CHUNK_SIZE;
+			/*
 			CHIAKI_LOGW(gkcrypt->log, "Already requested a higher key pos than in the buffer, skipping ahead from min %#llx to %#llx",
 						(unsigned long long)gkcrypt->key_buf_key_pos_min,
 						(unsigned long long)key_pos);
+			*/
 			gkcrypt->key_buf_key_pos_min = key_pos;
 			gkcrypt->key_buf_start_offset = 0;
 			gkcrypt->key_buf_populated = 0;
diff --git a/scripts/switch/build.sh b/scripts/switch/build.sh
index fb8bf6f..7d59b39 100755
--- a/scripts/switch/build.sh
+++ b/scripts/switch/build.sh
@@ -32,6 +32,8 @@ build_chiaki (){
       -DCHIAKI_ENABLE_SWITCH_LINUX="${CHIAKI_ENABLE_SWITCH_LINUX}" \
       -DCHIAKI_LIB_ENABLE_MBEDTLS=ON
 
+#-DCMAKE_CXX_FLAGS="-pg"
+
     pushd "${BASEDIR}/${build}/switch/"
       make
     popd
diff --git a/switch/src/host.cpp b/switch/src/host.cpp
index 71bdf74..4adf57c 100644
--- a/switch/src/host.cpp
+++ b/switch/src/host.cpp
@@ -88,6 +88,7 @@ void Host::InitVideo(){
  */
 	int source_width;
 	int source_height;
+	this->video_resolution = CHIAKI_VIDEO_RESOLUTION_PRESET_540p;
 	switch(this->video_resolution){
 		case CHIAKI_VIDEO_RESOLUTION_PRESET_360p:
 			source_width = 640;
@@ -109,6 +110,7 @@ void Host::InitVideo(){
 	this->codec_context->width = 1280;
 	this->codec_context->height = 720;
 	this->codec_context->pix_fmt = AV_PIX_FMT_YUV420P;
+	this->codec_context->thread_count = 10;
 	// sws context to convert frame data to YUV420:
 	// {"width":1280,"height":720}
 	// AV_PIX_FMT_BGR24
@@ -120,7 +122,7 @@ void Host::InitVideo(){
 		this->codec_context->width,
 		this->codec_context->height,
 		AV_PIX_FMT_YUV420P,
-		SWS_BILINEAR,
+		SWS_FAST_BILINEAR,
 		NULL,
 		NULL,
 		NULL
@@ -130,7 +132,7 @@ void Host::InitVideo(){
 		AV_PIX_FMT_YUV420P,
 		this->codec_context->width,
 		this->codec_context->height,
-		32
+		64
 	);
 
 	buffer = (uint8_t *) av_malloc(numBytes * sizeof(uint8_t));
@@ -173,7 +175,7 @@ int Host::Wakeup()
 	ChiakiErrorCode ret = chiaki_discovery_wakeup(this->log, NULL, host_addr.c_str(), credential);
 	if(ret == CHIAKI_ERR_SUCCESS){
 		//FIXME
-		//sleep(1);
+		sleep(5);
 	}
 	return ret;
 }
@@ -399,6 +401,10 @@ void Host::RegistCB(ChiakiRegistEvent *event){
 }
 
 bool Host::VideoCB(uint8_t *buf, size_t buf_size){
+    struct timespec start;
+    struct timespec end;
+    clock_gettime(CLOCK_MONOTONIC, &start);
+
 	// callback function to decode video buffer
 	// access chiaki session from Host object
 	AVPacket packet;
@@ -406,7 +412,6 @@ bool Host::VideoCB(uint8_t *buf, size_t buf_size){
 	packet.data = buf;
 	packet.size = buf_size;
 	int r;
-
 send_packet:
 	// TODO AVCodec internal buffer is full removing frames before pushing
 	r = avcodec_send_packet(this->codec_context, &packet);
@@ -419,7 +424,6 @@ send_packet:
 				CHIAKI_LOGE(this->log, "Failed to alloc AVFrame");
 				return false;
 			}
-
 			r = avcodec_receive_frame(this->codec_context, frame);
 			// send decoded frame for sdl texture update
 			av_frame_free(&frame);
@@ -435,7 +439,6 @@ send_packet:
 			return false;
 		}
 	}
-
 	// FramesAvailable
 	AVFrame *frame = av_frame_alloc();
 	AVFrame *next_frame = av_frame_alloc();
@@ -479,7 +482,7 @@ send_packet:
 		pict->data,
 		pict->linesize
 	);
-
+	//memcpy(this->pict, frame, sizeof(frame));
 	av_frame_free(&frame);
 	av_frame_free(&next_frame);
 	return true;
diff --git a/switch/src/main.cpp b/switch/src/main.cpp
index 45bc335..4d3815b 100644
--- a/switch/src/main.cpp
+++ b/switch/src/main.cpp
@@ -52,10 +52,10 @@ void socketInitializeDefault(){return;};
 // use a custom nintendo switch socket config
 // chiaki requiers many threads with udp/tcp sockets
 static const SocketInitConfig g_chiakiSocketInitConfig = {
-	.bsdsockets_version = 1,
+	.bsdsockets_version = 2,
 
-	.tcp_tx_buf_size = 0x8000,
-	.tcp_rx_buf_size = 0x10000,
+	.tcp_tx_buf_size = 0x4000,
+	.tcp_rx_buf_size = 0x5000,
 	.tcp_tx_buf_max_size = 0x40000,
 	.tcp_rx_buf_max_size = 0x40000,
 
